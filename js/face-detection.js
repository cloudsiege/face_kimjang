const webcamElement = document.getElementById('webcam'); 
const webcam = new Webcam(webcamElement, 'user'); 
const modelPath = '/models'; 
let currentStream;
let displaySize; 
let canvas; 
let faceDetection; 
let faceData = []; 
let count = 0; 
/* 
webcamElement: 웹캠 비디오 요소를 가져옵니다.
webcam: Webcam 클래스의 인스턴스를 생성하고, 이를 webcamElement와 연결합니다.
modelPath: 모델 파일의 경로를 지정합니다.
currentStream: 현재 웹캠 스트림을 저장합니다.
displaySize: 화면에 표시할 웹캠 영상의 크기를 저장합니다.
canvas: 얼굴 인식 결과를 그릴 캔버스 요소를 저장합니다.
faceDetection: 얼굴 인식 작업을 주기적으로 실행하는 타이머를 저장합니다.
faceData: 인식된 얼굴 데이터를 저장하는 배열입니다.
count: 서버로 전송된 얼굴 데이터의 개수를 저장하는 카운트 변수입니다.
*/
 
/**
 * 'webcam-switch' 요소의 체크 상태 변화 이벤트 핸들러입니다.
 * 'webcam-switch' 요소의 체크 여부에 따라 웹캠을 시작하거나 중지합니다.
 */
 $("#webcam-switch").change(function () {
  if (this.checked) {
    // 웹캠을 시작하고, 시작 성공 시 cameraStarted 함수 호출 및 비디오 요소의 변환 효과 초기화
    webcam.start()
      .then(result => {
        cameraStarted(); // 카메라가 시작된 후 실행되는 함수 호출
        webcamElement.style.transform = ""; // 비디오 요소의 변환 효과 초기화
        console.log("webcam started");
      })
      .catch(err => {
        displayError(); // 오류 메시지 표시 함수 호출
      });
  } else {
    // 웹캠 중지, cameraStopped 함수 호출 및 웹캠 중지
    cameraStopped(); // 카메라가 중지된 후 실행되는 함수 호출
    webcam.stop();
    console.log("webcam stopped");
  }
});
 
/**
 * 'cameraFlip' 요소의 클릭 이벤트 핸들러입니다.
 * 'cameraFlip' 요소를 클릭할 때마다 웹캠을 플립하여 전면/후면 카메라를 전환합니다.
 */
 $('#cameraFlip').click(function () {
  // 웹캠을 플립하여 전면/후면 카메라를 전환
  webcam.flip();

  // 웹캠을 다시 시작하고, 시작 성공 시 비디오 요소의 변환 효과 초기화
  webcam.start()
    .then(result => {
      webcamElement.style.transform = "";
    });
});
 
/**
 * 웹캠 비디오 요소의 'loadedmetadata' 이벤트 핸들러입니다.
 * 웹캠 비디오 요소의 메타데이터가 로드될 때마다 실행되며,
 * 비디오 요소의 크기를 가져와 displaySize 객체에 저장합니다.
 */
 $("#webcam").bind("loadedmetadata", function () {
  // 웹캠 비디오 요소의 너비와 높이를 가져와 displaySize 객체에 저장
  displaySize = { width: this.clientWidth, height: this.clientHeight };
});
 
/**
 * 얼굴 감지 스위치 상태 변화 이벤트 핸들러입니다.
 * 얼굴 감지 스위치의 체크 여부에 따라 각종 컨트롤과 기능을 활성화 또는 비활성화합니다.
 */
 $("#detection-switch").change(function () {
  if (this.checked) {
    // 얼굴 감지가 활성화되는 경우
    toggleContrl("box-switch", true);
    toggleContrl("name-switch", true);
    toggleContrl("landmarks-switch", true);

    // 박스, 이름, 랜드마크 스위치들을 기본 체크 상태로 설정
    $("#box-switch").prop('checked', true);
    $("#name-switch").prop('checked', true);

    // 로딩 표시 요소 표시
    $(".loading").removeClass('d-none');

    // 얼굴 감지 모델 로딩 후 캔버스 생성 및 감지 시작
    Promise.all([
      faceapi.nets.tinyFaceDetector.load(modelPath),
      faceapi.nets.faceLandmark68TinyNet.load(modelPath),
      faceapi.nets.faceRecognitionNet.load(modelPath)
    ]).then(function () {
      createCanvas(); // 캔버스 생성
      startDetection(); // 얼굴 감지 시작
    });
  } else {
    // 얼굴 감지가 비활성화되는 경우
    clearInterval(faceDetection); // 얼굴 감지 타이머 중지

    // 박스, 이름, 랜드마크 스위치들을 비활성화 상태로 설정
    toggleContrl("box-switch", false);
    toggleContrl("name-switch", false);
    toggleContrl("landmarks-switch", false);

    // 캔버스 초기화
    if (typeof canvas !== "undefined") {
      setTimeout(function () {
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)
      }, 1000);
    }
  }
});
 
/**
 * 웹캠 영상을 위한 캔버스를 생성하는 함수입니다.
 * 웹캠 영상을 표시하기 위한 캔버스가 없는 경우에만 생성합니다.
 */
 function createCanvas() {
  // 페이지 내에 캔버스 요소가 없는 경우에만 실행
  if (document.getElementsByTagName("canvas").length === 0) {
    // 웹캠 영상을 기반으로 캔버스 생성
    canvas = faceapi.createCanvasFromMedia(webcamElement);
    canvas.id = "face-canvas";
    
    // 캔버스를 비디오 컨테이너에 추가
    videoContainer.appendChild(canvas);
    
    // 캔버스의 크기를 화면 크기에 맞게 조정
    faceapi.matchDimensions(canvas, displaySize);
  }
}

 
/**
 * 특정 컨트롤 요소의 활성화 여부를 전환하는 함수입니다.
 * @param {string} id - 활성화 여부를 전환할 컨트롤 요소의 ID
 * @param {boolean} show - true면 컨트롤을 활성화하고, false면 비활성화합니다.
 */
 function toggleContrl(id, show) {
  if (show) {
    // 컨트롤을 활성화하고, 활성화 스타일 제거
    $("#" + id).prop('disabled', false);
    $("#" + id).parent().removeClass('disabled');
  } else {
    // 컨트롤을 비활성화하고, 체크를 해제하고 변경 이벤트를 트리거하여 체크 여부를 업데이트합니다.
    $("#" + id).prop('checked', false).change();
    // 컨트롤을 비활성화하고, 비활성화 스타일 추가
    $("#" + id).prop('disabled', true);
    $("#" + id).parent().addClass('disabled');
  }
}


// 얼굴형 데이터 json
const imageDescriptors = [
  {name: "장태영", 
  class: "보안과",
  descriptors: [
  -0.10796964168548584,
  0.11063645780086517,
  0.002650010399520397,
  -0.05858393758535385,
  -0.08180209994316101,
  -0.10717493295669556,
  -0.07516109943389893,-0.15867555141448975,0.13405776023864746,-0.08758267015218735,0.2729109227657318,-0.03166250139474869,-0.17755915224552155,-0.1668262779712677,-0.06898770481348038,0.1849915087223053,-0.1853914111852646,-0.09929034113883972,-0.06846406310796738,-0.025645725429058075,0.12955939769744873,-0.008250088430941105,0.04921139404177666,0.039339207112789154,-0.07200369238853455,-0.31537315249443054,-0.08517275005578995,-0.08151450753211975,-0.00551361870020628,-0.060541436076164246,-0.0089366864413023,0.0007067825645208359,-0.22175395488739014,-0.1028754711151123,0.02874690853059292,0.08430048823356628,-0.0088015366345644,-0.006317250430583954,0.16953745484352112,-0.04323801025748253,-0.18701356649398804,-0.037198927253484726,0.060849256813526154,0.21075066924095154,0.1672922521829605,0.07243102043867111,-0.004628535360097885,-0.14913156628608704,0.0953371599316597,-0.1728096306324005,0.04616539552807808,0.12854315340518951,0.03730493038892746,0.07006597518920898,0.02278664894402027,-0.08495412021875381,0.07711609452962875,0.12192272394895554,-0.12621203064918518,-0.04688619077205658,0.09446981549263,-0.10362549871206284,-0.12090035527944565,-0.0632346048951149,0.2546027898788452,0.06764630973339081,-0.12878352403640747,-0.14037677645683289,0.07981934398412704,-0.09830786287784576,-0.12007226049900055,0.02675236389040947,-0.11233431100845337,-0.1532825529575348,-0.35027480125427246,-0.00438366923481226,0.42162567377090454,0.08150386065244675,-0.22862380743026733,0.05923972278833389,-0.06645648181438446,0.013539900071918964,0.18649135529994965,0.0975876972079277,0.008049460127949715,0.04500151053071022,-0.11063404381275177,0.028300287202000618,0.14573167264461517,-0.08481121808290482,-0.01628882810473442,0.2062537670135498,-0.022900156676769257,0.12897005677223206,0.015589350834488869,0.04513932392001152,-0.04142114892601967,0.06547711789608002,-0.12208142131567001,0.005754442885518074,0.13873466849327087,0.038456641137599945,-0.010582879185676575,0.059331513941287994,-0.12306384742259979,0.10124851763248444,0.04559927061200142,0.054889556020498276,0.04013833403587341,-0.07112029194831848,-0.10062279552221298,-0.0673520565032959,0.09283433109521866,-0.20787598192691803,0.26325851678848267,0.16168208420276642,0.0048317513428628445,0.13345494866371155,0.1414819359779358,0.06593557447195053,-0.010717840865254402,-0.05953861027956009,-0.2192409336566925,-0.016413863748311996,0.11328567564487457,-0.026423631235957146,0.09708216786384583,
  -0.026122113689780235], landmarks: []},
  {name: "김택윤",
  class: "보안과",
descriptors: [-0.1538873165845871,0.027385860681533813,0.01785905286669731,-0.05357949435710907,-0.0927843451499939,-0.03509574010968208,-0.06482288986444473,-0.07261886447668076,0.09511631727218628,-0.11169445514678955,0.17082029581069946,-0.09448456764221191,-0.20612302422523499,-0.086271733045578,-0.05472949892282486,0.18851019442081451,-0.11700503528118134,-0.09613293409347534,-0.10095521807670593,-0.04945916682481766,0.04972083121538162,0.006722538731992245,-0.028556926175951958,0.023213960230350494,-0.07891368120908737,-0.31303444504737854,-0.043198101222515106,-0.0698133111000061,-0.0682777687907219,-0.06394245475530624,-0.05966714397072792,0.06218370050191879,-0.20073142647743225,-0.11695580184459686,0.04606287181377411,0.10189232230186462,-0.04690471664071083,-0.015966150909662247,0.13744603097438812,-0.0014286013320088387,-0.20101629197597504,-0.016283931210637093,0.0792853906750679,0.23698273301124573,0.150751993060112,0.06564754247665405,-0.030259383842349052,-0.12440958619117737,0.08467202633619308,-0.21258558332920074,0.04429129511117935,0.12228034436702728,0.09365642070770264,0.10801783204078674,0.028967853635549545,-0.09035012125968933,0.05860920995473862,0.10316097736358643,-0.08818426728248596,-0.029153896495699883,0.09346935153007507,-0.06218211352825165,-0.09044236689805984,-0.11872204393148422,0.23983405530452728,0.10902520269155502,-0.1238008365035057,-0.13836956024169922,0.13361234962940216,-0.0823700875043869,-0.11536501348018646,-0.0015767086297273636,-0.0972299575805664,-0.16605481505393982,-0.29734882712364197,0.054943256080150604,0.3303969204425812,0.11402454227209091,-0.22978027164936066,-0.005068972706794739,-0.04245532304048538,0.01699964515864849,0.15163667500019073,0.11984407901763916,-0.006177045404911041,-0.0015525687485933304,0.04142393171787262,-0.01788393408060074,0.1688711792230606,-0.04651503264904022,-0.02750527858734131,0.13442938029766083,0.016083497554063797,0.034689564257860184,0.03322109580039978,0.016593758016824722,-0.0295760128647089,0.055759184062480927,-0.15472640097141266,0.03705436736345291,0.08085550367832184,-0.045407380908727646,0.009078655391931534,0.10987250506877899,-0.15196990966796875,0.1402396261692047,0.021279333159327507,0.007006643805652857,0.06354401260614395,0.008575720712542534,-0.09639154374599457,-0.05257449671626091,0.09176848828792572,-0.21084871888160706,0.2324480414390564,0.18776896595954895,0.037418920546770096,0.12273699045181274,0.13394106924533844,0.09927751868963242,0.030872300267219543,0.025544017553329468,-0.2214089184999466,-0.06895951181650162,0.1449223756790161,-0.001979988068342209,0.010541794821619987,0.0020821671932935715],
 landmarks: [{"_imgDims":{"_width":1118,"_height":1294},"_shift":{"_x":395.3383564949035,"_y":1127.2317171096802},"_positions":[{"_x":383.607824884355,"_y":1725.2337734103203},{"_x":432.71339514106506,"_y":1866.1011406183243},{"_x":491.56557567417616,"_y":2002.882668852806},{"_x":550.1040786802769,"_y":2120.255295395851},{"_x":632.1302001476288,"_y":2244.381516933441},{"_x":737.1659707427025,"_y":2327.6320719718933},{"_x":845.9423984289169,"_y":2377.2230945825577},{"_x":977.3353943824768,"_y":2424.594978570938},{"_x":1155.8088653087616,"_y":2426.162227869034},{"_x":1313.265446305275,"_y":2333.1604050397873},{"_x":1406.655594587326,"_y":2235.5797770023346},{"_x":1477.0546357631683,"_y":2142.0937420129776},{"_x":1525.1861917972565,"_y":2010.6418640613556},{"_x":1536.379242181778,"_y":1865.4797941446304},{"_x":1527.9252798557281,"_y":1731.8776146769524},{"_x":1511.1448336839676,"_y":1589.6515919566154},{"_x":1486.1091396808624,"_y":1437.1744515001774},{"_x":441.2984593883156,"_y":1542.7352283596992},{"_x":487.70001399517054,"_y":1466.3436642885208},{"_x":567.0774251818657,"_y":1422.9902668893337},{"_x":648.366430491209,"_y":1405.4010365009308},{"_x":722.5485271811485,"_y":1412.2556504309177},{"_x":1013.0220386981964,"_y":1341.468506604433},{"_x":1077.9158487319946,"_y":1299.1187619268894},{"_x":1151.683240532875,"_y":1268.1276121884584},{"_x":1248.6752389669418,"_y":1263.1818492859602},{"_x":1325.0082601308823,"_y":1302.6690405011177},{"_x":908.5234702825546,"_y":1555.1055841445923},{"_x":930.358741402626,"_y":1656.1523629426956},{"_x":949.8158025145531,"_y":1745.4080588817596},{"_x":966.2480318546295,"_y":1830.472828388214},{"_x":906.543955385685,"_y":1912.6504501104355},{"_x":946.4705419540405,"_y":1915.1538840532303},{"_x":995.7879877090454,"_y":1909.7986271381378},{"_x":1045.3967081308365,"_y":1883.3548431396484},{"_x":1082.7610971927643,"_y":1863.967845916748},{"_x":579.9674287140369,"_y":1633.5035666823387},{"_x":622.1625224947929,"_y":1596.874436199665},{"_x":691.6305642724037,"_y":1581.4734352231026},{"_x":763.5561819076538,"_y":1595.3129715323448},{"_x":714.5068541169167,"_y":1635.0526522397995},{"_x":640.0233038067818,"_y":1648.2450426220894},{"_x":1058.2048635482788,"_y":1518.776328921318},{"_x":1114.0953476428986,"_y":1468.6311386823654},{"_x":1186.8906244039536,"_y":1450.5422511696815},{"_x":1243.1558805704117,"_y":1463.3176468014717},{"_x":1196.8958525657654,"_y":1506.8779604434967},{"_x":1122.100836277008,"_y":1519.3613864779472},{"_x":869.7118372917175,"_y":2129.5908410549164},{"_x":910.8623971939087,"_y":2059.0795855522156},{"_x":978.0830060243607,"_y":2004.7485593557358},{"_x":1024.788842201233,"_y":2000.8219519853592},{"_x":1066.6071147918701,"_y":1976.3838922977448},{"_x":1163.2891132831573,"_y":1991.6004792451859},{"_x":1247.102648973465,"_y":2021.8921996355057},{"_x":1198.7341948747635,"_y":2107.117627620697},{"_x":1148.069795370102,"_y":2160.8446612358093},{"_x":1083.5027780532837,"_y":2190.2244153022766},{"_x":1020.5136151313782,"_y":2199.045205950737},{"_x":949.5188636183739,"_y":2184.5637298822403},{"_x":878.1628009080887,"_y":2127.7726930379868},{"_x":977.5203814506531,"_y":2056.936881184578},{"_x":1038.9346220493317,"_y":2039.8498531579971},{"_x":1098.1263523101807,"_y":2029.067918419838},{"_x":1228.2919430732727,"_y":2024.4585703611374},{"_x":1122.1232932806015,"_y":2097.7560896873474},{"_x":1067.6707237958908,"_y":2123.929924249649},{"_x":1007.0062938928604,"_y":2134.6321082115173}]}]}
];

/**
 * 얼굴 감지를 시작하는 함수입니다.
 * 일정 간격으로 얼굴을 감지하고, 감지된 얼굴에 대한 작업 및 데이터 처리를 수행합니다.
 */
 function startDetection() {
  // 얼굴 감지를 주기적으로 수행하는 타이머 설정
  faceDetection = setInterval(async () => {
    // 웹캠을 사용하여 얼굴을 감지합니다.
    const detections = await faceapi.detectAllFaces(webcamElement, new faceapi.TinyFaceDetectorOptions())
      .withFaceLandmarks(true)
      .withFaceDescriptors();

    // 감지된 얼굴 데이터를 화면 크기에 맞게 조절합니다.
    const resizedDetections = faceapi.resizeResults(detections, displaySize);

    // 감지된 얼굴의 랜드마크와 특징을 추출하여 배열로 구성합니다.
    const faces = resizedDetections.map(detection => {
      const landmarks = detection.landmarks;
      const descriptors = detection.descriptor;

      return {
        landmarks: landmarks,
        descriptors: descriptors
      };
    });

    // 새로 감지된 얼굴 중 이미 등록되지 않은 얼굴을 필터링하여 신규 얼굴 배열에 추가합니다.
    const newFaces = faces.filter(face => {
      const isCounted = faceData.some(data => {
        if (data.descriptors && face.descriptors) {
          const similarity = faceapi.euclideanDistance(data.descriptors, face.descriptors);
          return similarity <= 0.5; // 일정 유사도 이상이면 이미 등록된 얼굴로 판단
        }
        return false;
      });
      return !isCounted; // 이미 등록되지 않은 얼굴만 반환
    });

    // 신규 얼굴 데이터를 기존 얼굴 데이터에 추가합니다.
    faceData.push(...newFaces);

    // 캔버스를 초기화하여 이전에 그려진 내용을 지웁니다.
    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);

    // 체크박스에 따라 얼굴 시각화 및 이름 표시 작업을 수행합니다.
    if ($("#box-switch").is(":checked") || $("#name-switch").is(":checked")) {
      resizedDetections.forEach((detection, index) => {
        const box = detection.detection.box;

        if ($("#box-switch").is(":checked")) {
          faceapi.draw.drawDetections(canvas, [detection]);
        }

        if ($("#name-switch").is(":checked")) {
          const bestMatch = findBestMatch(faces[index].descriptors, imageDescriptors);
          const name = bestMatch.name;
          const textHeight = 14; 
          const textX = box.x + box.width + 5; 
          const textY = box.y + box.height - textHeight;

          // 이름을 바운딩 박스 옆에 표시합니다.
          canvas.getContext('2d').font = '14px Arial';
          canvas.getContext('2d').fillStyle = 'blue';
          canvas.getContext('2d').fillText(name, textX, textY);
        }
      });
    }

    // 얼굴 시각화 및 랜드마크 시각화 작업을 수행합니다.
    if ($("#box-switch").is(":checked")) {
      faceapi.draw.drawDetections(canvas, resizedDetections);
    }
    if ($("#landmarks-switch").is(":checked")) {
      faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);
    }

    // 로딩 표시 요소를 숨깁니다.
    if (!$(".loading").hasClass('d-none')) {
      $(".loading").addClass('d-none');
    }
  }, 300);

  // 일정 시간마다 서버로 얼굴 데이터 전송하는 타이머 설정
  setInterval(() => {
    if (faceData.length !== 0) {
      // 얼굴 데이터를 서버로 전송하고, 전송 후 배열을 초기화합니다.
      sendFaceDataToServer(faceData);
      faceData = [];
    }
  }, 10000); // 10초마다 전송
}

/**
 * 얼굴 특징과 이미지들의 얼굴 특징들 사이에서 가장 적합한 매칭을 찾아 반환합니다.
 * @param {Array} descriptor - 현재 얼굴 객체의 특징 배열
 * @param {Array} imageDescriptors - 이미지들의 얼굴 특징들 배열
 * @returns {Object|null} - 가장 적합한 매칭을 가진 이미지 정보 또는 매칭이 없는 경우 null
 */
 function findBestMatch(descriptor, imageDescriptors) {
  // 가장 적합한 매칭을 저장할 변수
  let bestMatch = null;
  // 현재까지의 최적 거리
  let bestDistance = Number.MAX_VALUE;

  // 이미지들과의 거리 비교
  for (const imageDesc of imageDescriptors) {
    // 현재 얼굴 특징과 이미지의 얼굴 특징 간의 유클리드 거리 계산
    const distance = faceapi.euclideanDistance(descriptor, imageDesc.descriptors);

    // 최적 거리보다 작을 경우에만 아래 작업 수행
    if (distance < bestDistance) {
      // 최적 거리 및 매칭 정보 업데이트
      bestDistance = distance;
      bestMatch = imageDesc;
    }
  }

  // 가장 적합한 매칭 정보 반환
  return bestMatch;
}

/**
 * 카메라가 시작된 후 호출되는 함수입니다.
 * 카메라가 시작되면 실행되며, 필요한 제어를 활성화하고 오류 메시지를 숨깁니다.
 * 또한 여러 개의 웹캠이 연결되어 있는 경우 카메라 플립 기능을 활성화합니다.
 */
 function cameraStarted() {
  // 얼굴 감지 스위치 활성화
  toggleContrl("detection-switch", true);

  // 오류 메시지 숨김
  $("#errorMsg").addClass("d-none");

  // 여러 개의 웹캠이 연결되어 있는 경우 카메라 플립 기능 활성화
  if (webcam.webcamList.length > 1) {
    $("#cameraFlip").removeClass('d-none');
  }
}

/**
 * 카메라가 중지된 후 호출되는 함수입니다.
 * 카메라 중지 시 실행되며, 얼굴 감지 스위치를 비활성화하고 오류 메시지를 숨기며
 * 카메라 플립 기능을 비활성화합니다.
 */
 function cameraStopped() {
  // 얼굴 감지 스위치 비활성화
  toggleContrl("detection-switch", false);

  // 오류 메시지 숨김
  $("#errorMsg").addClass("d-none");

  // 카메라 플립 기능 비활성화
  $("#cameraFlip").addClass('d-none');
}

/**
 * 오류 메시지를 표시하는 함수입니다.
 * @param {string} err - 표시할 오류 메시지 (선택 사항)
 */
 function displayError(err = '') {
  // 만약 오류 메시지가 주어졌다면, 해당 메시지를 #errorMsg 요소에 설정
  if (err !== '') {
    $("#errorMsg").html(err);
  }

  // 오류 메시지를 화면에 표시하기 위해 클래스 제거
  $("#errorMsg").removeClass("d-none");
}

/**
 * 얼굴 데이터를 서버로 전송하는 함수입니다.
 * @param {Array} data - 전송할 얼굴 데이터 배열
 */
 function sendFaceDataToServer(data) {
  // 전송한 얼굴 데이터의 수를 기록하는 변수인 'count' 증가
  count += data.length;

  // 전송할 요청 데이터 객체 생성
  const requestData = {
    faceData: data, // 얼굴 데이터 배열
    count: count // 현재까지 전송한 얼굴 데이터의 총 수
  };

  // 서버로 데이터 전송
  $.ajax({
    url: 'https://biqapp.com/api/v1/face/save-data', // 데이터 전송할 URL
    type: 'POST', // POST 요청
    contentType: 'application/json', // 요청 데이터 형식
    data: JSON.stringify(requestData), // JSON 형식으로 데이터 변환하여 전송
    success: function(response) {
      console.log('얼굴 데이터 전송 성공');
      console.log('현재 카운트:', count);
      console.log(response); // 서버 응답 로그 출력
    },
    error: function(error) {
      console.error('얼굴 데이터 전송 중 오류 발생', error);
    },
    complete: function() {
      count = 0; // 전송 완료 후 'count' 초기화
    }
  });
}





